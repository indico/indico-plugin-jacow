name: CI

env:
  PYTHON_VERSION: '3.12.11'

on:
  push:
    branches:
      - master
      - '*.x'
  pull_request:
    branches:
      - master
      - '*.x'

jobs:
  setup:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Pick Indico core repo
        env:
          GH_TOKEN: ${{ github.token }}
          PR_BODY: ${{ github.event_name == 'pull_request' && github.event.pull_request.body }}
          PR_BASE_REF: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref }}
        run: python .github/utils/get_core_repo.py indico/indico INDICO

      - name: Install system dependencies
        run: sudo apt-get install postgresql-client libpq-dev

      - name: Create virtualenv
        run: |
          uv venv --python ${{ env.PYTHON_VERSION }} --seed .venv
          source .venv/bin/activate

      - name: Activate virtualenv for later steps
        run: |
          echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Install Indico
        run: |
          uv pip install babel
          uv pip install "indico[dev] @ git+https://github.com/${INDICO_REPO}.git@${INDICO_BRANCH}"

      - name: Archive environment
        run: tar cf /tmp/env.tar .venv

      - name: Upload environment
        uses: actions/upload-artifact@v4
        with:
          name: environment
          retention-days: 1
          path: /tmp/env.tar

  lint:
    needs: setup
    runs-on: ubuntu-22.04

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download environment
        uses: actions/download-artifact@v4
        with:
          name: environment
          path: /tmp

      - name: Restore environment
        run: tar xf /tmp/env.tar

      - name: Activate virtualenv for later steps
        run: |
          echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Check import sorting
        if: success() || failure()
        run: isort --diff --check-only .

      - name: Check headers
        if: success() || failure()
        run: |
          echo '::add-matcher::.github/matchers/headers-problem-matcher.json'
          unbehead --check
          echo '::remove-matcher owner=headers::'

      - name: Run ruff
        if: success() || failure()
        run: |
          ruff check --output-format github .

  test-plugin:
    needs: setup
    runs-on: ubuntu-22.04

    defaults:
      run:
        shell: bash

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 10

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Download environment
        uses: actions/download-artifact@v4
        with:
          name: environment
          path: /tmp

      - name: Restore environment
        run: tar xf /tmp/env.tar

      - name: Activate virtualenv for later steps
        run: |
          echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Install plugin
        run: |
          cd "${GITHUB_WORKSPACE}"
          uv pip install -e .

      - name: Install redis
        run: sudo apt-get install redis-server

      - name: Setup database
        run: |
          export PGHOST=localhost
          export PGPORT=${{ job.services.postgres.ports[5432] }}
          export PGUSER=postgres
          createuser indicotest
          createdb -O indicotest indicotest
          psql indicotest -c 'CREATE EXTENSION unaccent;'
          psql indicotest -c 'CREATE EXTENSION pg_trgm;'

      - name: Run tests
        run: |
          export INDICO_TEST_DATABASE_URI="postgresql://indicotest@localhost:${{ job.services.postgres.ports[5432] }}/indicotest"
          cd "${GITHUB_WORKSPACE}"
          pytest --color=yes
